FlackFixtures = {};

FlackFixtures.answers = {
    "items": [
    {
        "body": "<p>Currently, Github's <a href=\"https://github.com/github/linguist\" rel=\"nofollow\">linguist project</a> is what is used to determine language statistics, as described in <a href=\"https://github.com/blog/881-linguist\" rel=\"nofollow\">this Github blog post</a> (which came out a few months after this question was originally asked).</p>\n"
    },
    {
        "body": "<p>One way to sort of simulate multi-threadedness would be to have a Javascript function do a little bit of work, then call <code>setTimeout</code> with that same function; then the function will do a little work and call <code>setTimeout</code> again, and this cycle will continue forever or until they close the frame or you signal to stop working.  <a href=\"https://developer.mozilla.org/en/DOM/window.setTimeout\" rel=\"nofollow\">MDN has a good example of how to set this up.</a> </p>\n\n<p>Between timeouts, Javascript should not consume any processor time.  You might have to play around a little bit to see how long your timeouts should be -- 1ms is probably way too short, but 1s is definitely way too long.   Another factor will be the processor speed of the computer running the job, so you might need to do some pseudo-benchmarking on the client's side via Javascript before you can determine how long to delay each time.</p>\n"
    },
    {
        "body": "<p>Your issue is that <code>delegateEvents</code> expects a single, non-changing element for your view.  Because your <code>render</code> function creates a new element every time, the bindings made by <code>delegateEvents</code> are never fired when you click on the element generated by <code>render</code>.</p>\n\n<p>Luckily the current version of Backbone offers a <a href=\"http://backbonejs.org/#View-setElement\" rel=\"nofollow\"><code>setElement</code> method</a> that will reassign your element with the argument you provide, and then it will automatically call <code>delegateEvents</code>.</p>\n"
    },
    {
        "body": "<p>The difference is (most likely) because the month in Javascript's <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/UTC\" rel=\"nofollow\"><code>Date.UTC</code></a> is zero-based and the Ruby's <a href=\"http://ruby-doc.org/stdlib-1.9.3/libdoc/date/rdoc/Date.html#method-c-new\" rel=\"nofollow\"><code>Date.now</code></a> is one-based.</p>\n"
    },
    {
        "body": "<p>At least <a href=\"https://mailman.research.att.com/pipermail/graphviz-interest/2007q2/004428.html\" rel=\"nofollow\">as of May 2007</a>, you can't force \"columns\" <em>per se</em>, but you <em>can</em> apply <em>weight</em> to edges which should help force alignment.  But actually, in this case, if you just add an invisible edge from D to E, you've got vertical alignment.</p>\n\n<pre><code>digraph exmp {\n    A -&gt; B -&gt; C -&gt; D\n    C -&gt; E [constraint=false]\n    A -&gt; C [style=\"dotted\", constraint=false]\n    A -&gt; D [style=\"dotted\",  constraint=false]\n    B -&gt; D [constraint=false]\n    D -&gt; A [style=\"dashed\", constraint=false]\n    C -&gt; A [style=\"dashed\", constraint=false]\n    D -&gt; E [style=\"invis\"] // &lt;---- important new line\n\n\n    subgraph cluster_hackToSinkIt { E -&gt; F }\n    { rank=\"sink\" E F }\n}\n</code></pre>\n\n<p><img src=\"http://img195.imageshack.us/img195/6678/13412833.png\" alt=\"alt text\"></p>\n\n<p>I'm not aware of any way to force edges to one side or another.</p>\n"
    },
    {
        "body": "<p>You'll want to set the label's <code>textvariable</code> with a <a href=\"http://epydoc.sourceforge.net/stdlib/Tkinter.StringVar-class.html\" rel=\"nofollow\"><code>StringVar</code></a>; when the <code>StringVar</code> changes (by you calling <code>myStringVar.set(\"text here\")</code>), then the label's text also gets updated.  And yes, I agree, this is a strange way to do things.</p>\n\n<p>See <a href=\"http://effbot.org/tkinterbook/label.htm\" rel=\"nofollow\">the Tkinter Book</a> for a little more information on this:</p>\n\n<blockquote>\n  <p>You can associate a Tkinter variable with a label. When the contents of the variable changes, the label is automatically updated:</p>\n\n<pre><code>v = StringVar()\nLabel(master, textvariable=v).pack()\n\nv.set(\"New Text!\")\n</code></pre>\n</blockquote>\n"
    },
    {
        "body": "<p>There were many breaking changes in Python 3, among them the switch to <a href=\"http://docs.python.org/release/3.1.3/whatsnew/3.0.html#text-vs-data-instead-of-unicode-vs-8-bit\" rel=\"nofollow\">Unicode for all text</a>.</p>\n\n<p>So <em>Python</em> wasn't designed ground-up for Unicode, but Python <strong>3</strong> was.</p>\n"
    },
    {
        "body": "<p>As of Vim 7.3 you can compile in scripting support for <a href=\"http://vimdoc.sourceforge.net/htmldoc/if_lua.html#Lua\" rel=\"nofollow\">Lua</a> or <a href=\"http://vimdoc.sourceforge.net/htmldoc/if_pyth.html#Python\" rel=\"nofollow\">Python</a>, which ought to more or less completely avoid learning VimScript.  Granted neither of those are Ruby, but unless you have a compelling reason to use Ruby over the other options, this might solve your problem.</p>\n"
    },
    {
        "body": "<p>Like @Peter says, out-of-scope opened URLs will become eligible for garbage collection.</p>\n\n<p>However, also note that <code>urllib.py</code> defines:</p>\n\n<pre><code> def __del__(self):\n        self.close()\n</code></pre>\n\n<p>This means that <strong>when the reference count for that instance reaches zero</strong>, its <a href=\"http://docs.python.org/reference/datamodel.html#object.__del__\" rel=\"nofollow\"><code>__del__</code></a> method will be called, and thus its <code>close</code> method will be called as well.  The most \"normal\" way for the reference count to reach zero is to simply let the instance go out of scope, but there's nothing strictly stopping you from an explicit <code>del x</code> early (however it doesn’t directly call <code>__del__</code> but just decrements the reference count by one).</p>\n\n<p>It's certainly good style to explicitly close your resources -- especially when your application runs the risk of using too much of said resources -- but Python <em>will</em> automatically clean up for you if you don't do anything funny like maintaining (circular?) references to instances that you don't need any more.</p>\n"
    },
    {
        "body": "<p>It sounds like you're looking for <a href=\"http://corelib.rubyonrails.org/classes/Dir.html#M000846\" rel=\"nofollow\"><code>Dir.entries</code></a>:</p>\n\n<blockquote>\n  <p>Returns an array containing all of the filenames in the given directory. Will raise a SystemCallError if the named directory doesn’t exist. </p>\n</blockquote>\n\n<p>If searching Google for how to solve this problem isn't turning up any results, you can look through the Ruby documentation.</p>\n"
    },
    {
        "body": "<p>You can use <a href=\"http://www.kernel.org/pub/software/scm/git/docs/git-clone.html\" rel=\"nofollow\"><code>git clone --depth=$NUM_REVISIONS</code></a>, which has the following caveats:</p>\n\n<blockquote>\n  <p>Create a shallow clone with a history truncated to the specified number of revisions. A shallow repository has a number of limitations (you cannot clone or fetch from it, nor push from nor into it), but is adequate if you are only interested in the recent history of a large project with a long history, and would want to send in fixes as patches.</p>\n</blockquote>\n"
    },
    {
        "body": "<p>Take the characters from a string and make a Set out of them:</p>\n\n<pre><code>irb(main):001:0&gt; require 'set'\nirb(main):002:0&gt; Set.new(\"123444454321\".split(''))\n=&gt; #&lt;Set: {\"1\", \"2\", \"3\", \"4\", \"5\"}&gt;\n</code></pre>\n\n<p>The <code>.split('')</code> call just breaks the string into an array, character-wise.  I originally used <code>String#each_char</code>, but that was new in 1.8.7, and you didn't mention what version of Ruby you're using.</p>\n"
    },
    {
        "body": "<p>Unless there's a specific reason that you need source code -- and I suspect there isn't, you just want to serialize and deserialize data from disk -- a better option would be Python's <a href=\"http://docs.python.org/library/pickle.html\" rel=\"nofollow\"><code>pickle</code> module</a>.</p>\n"
    },
    {
        "body": "<p>You had it nearly right; you just need to tell Python exactly when to make something a string.</p>\n\n<pre><code>&gt;&gt;&gt; cnt = 0\n&gt;&gt;&gt; while cnt &lt; 10:\n...     cnt += 1\n...     print str(cnt) + \" + 1 = \" + str(cnt + 1)\n... \n1 + 1 = 2\n2 + 1 = 3\n3 + 1 = 4\n4 + 1 = 5\n5 + 1 = 6\n6 + 1 = 7\n7 + 1 = 8\n8 + 1 = 9\n9 + 1 = 10\n10 + 1 = 11\n</code></pre>\n\n<p>Strictly speaking, you aren't treating <code>cnt</code> as both an integer and a string here -- it's always an integer.</p>\n"
    },
    {
        "body": "<p>It looks like the <code>Base64</code> library pads by default; padding in Base64 would be the <code>=</code> characters on the end of the data here:</p>\n\n<pre><code>irb(main):002:0&gt; require 'Base64'\n=&gt; true\nirb(main):003:0&gt; Base64.encode64('a')\n=&gt; \"YQ==\\n\"\n</code></pre>\n\n<p>Without the padding, you couldn't be sure whether <code>YQ</code> was everything or whether it was missing something.</p>\n"
    },
    {
        "body": "<p>An annotated tag is probably the first thing you should do.</p>\n\n<p>From there, you have several choices for your workflow: here are two of the most common options.</p>\n\n<p>You can move on in a \"forward-only\" style of development, where the 1.0 series is never supported anymore (1); you can do \"support-only\" on 1.0 series and all new features get added to the 2.0 series (or substitute 1.0.1 and 1.1, leaving 2.0 for a full rewrite -- the version numbers aren't that important) (2).</p>\n\n<p>Scenario 2 is definitely the more \"professional\" option, but if it's a smaller project with a narrow scope, Scenario 1 is okay.</p>\n\n<p>In Scenario 1, you can either do all your work in the master branch, or do feature branches, merging into master when ready.  When you have a new release, just tag it as 1.1 or 1.0.1 or whatever.</p>\n\n<p>In Scenario 2, you can use your master branch to reflect the newest release, a \"support\" branch to reflect your support release, a \"staging\" branch to stage and test new features that will eventually get merged into master, and you can use feature branches for development of new features or bug fixes.  And as you deploy bug fixes, you'll merge the support branch back into master.  When you release either a new version or a support version, just use an annotated tag again.</p>\n\n<p>Personally, I'm usually in favor of the master-staging-support branch with tags, rather than having a branch for each versioned release; but that's the great thing about git -- you can do it however you see fit!  So of course, the two options I've presented are by no means the only options you have for your development workflow.</p>\n"
    },
    {
        "body": "<p>You're looking for <a href=\"http://www.ruby-doc.org/core/classes/Module.html#M000485\" rel=\"nofollow\"><code>Module#const_get</code></a>:</p>\n\n<pre><code>irb(main):014:0&gt; MyModule.constants.each do |c|\nirb(main):015:1*   puts(c.to_s + \"  \" + MyModule.const_get(c).to_s)\nirb(main):016:1&gt; end\nMY_CONST  5\n=&gt; [:MY_CONST]\n</code></pre>\n"
    },
    {
        "body": "<p>That means that your block</p>\n\n<pre><code>if options.benchmark == 'perlbench':\n     process = Mybench.perlbench\nelif options.benchmark == 'bzip2':\n     process = Mybench.bzip2\nelif options.benchmark == 'gcc':\n     process = Mybench.gcc\n</code></pre>\n\n<p>didn't match any of <code>options.benchmark</code> so the variable <code>process</code> was never assigned anything.  You need to throw an</p>\n\n<pre><code>else:\n    process = Mybench.&lt;somedefault&gt;\n</code></pre>\n\n<p>on the end of it (of course filling in <code>&lt;somedefault&gt;</code> as appropriate).  Or if that's an invalid case, you could raise an exception, perhaps.</p>\n"
    },
    {
        "body": "<p>A just slightly different way to do it would be to use <a href=\"http://docs.python.org/library/functions.html#all\" rel=\"nofollow\">the built-in <code>all</code> method</a>; however, this will also catch false-ish values like <code>0</code> or <code>\"\"</code>, which may not be what you want:</p>\n\n<pre><code>&gt;&gt;&gt; all([1, 2, 3])\nTrue\n&gt;&gt;&gt; all([None, 1, 2])\nFalse\n&gt;&gt;&gt; all([0, 1])\nFalse\n</code></pre>\n"
    },
    {
        "body": "<p>Lua for Windows includes a handful of other, useful libraries and tools.  The actual Lua executable included is still tiny, in the 1-2MB range as expected.</p>\n\n<p>Having the extras there already will only make things easier, and disk space is cheap: go with Lua for Windows.</p>\n"
    },
    {
        "body": "<p><code>var version = ...</code> <em>shadows</em> the property with a local variable; meaning, the assignment is stored in a local variable named <code>version</code>, not the property named <code>version</code>.</p>\n\n<p><code>this.version = ...</code> will do what you want.</p>\n\n<p>By the way, out of convention in C#, local variables begin with lowercase letters as you have, but properties begin with an uppercase letter -- conventions like these may help alleviate shadowing issues as you experienced here.</p>\n"
    },
    {
        "body": "<p><a href=\"http://en.wikipedia.org/wiki/Restrict\" rel=\"nofollow\">Wikipedia entry for <code>restrict</code></a></p>\n\n<p>In short, <code>restrict</code> tells the compiler that the segments of memory pointed to by s1 and s2 do not overlap; this allows the code to perform less error checking.</p>\n"
    },
    {
        "body": "<p>The directions for this are in <a href=\"http://www.redmine.org/projects/redmine/wiki/RedmineTextFormatting\" rel=\"nofollow\">Redmine's text formatting page</a>.  </p>\n\n<blockquote>\n  <p>Redmine allows hyperlinking between issues, changesets and wiki pages from anywhere wiki formatting is used.</p>\n  \n  <ul>\n  <li>...</li>\n  <li>Link to a changeset with a non-numeric hash: <strong>commit:c6f4d0fd</strong> (displays c6f4d0fd). Added in r1236.</li>\n  </ul>\n</blockquote>\n"
    },
    {
        "body": "<p>SQLite has <a href=\"http://www.sqlite.org/lang_corefunc.html\" rel=\"nofollow\">a <code>LOWER</code> function</a> for this:</p>\n\n<pre><code>sqlite&gt; SELECT LOWER(\"Hello, WORLD!\");\nhello, world!\n</code></pre>\n\n<blockquote>\n  <p>The lower(X) function returns a copy of string X with all ASCII characters converted to lower case. The default built-in lower() function works for ASCII characters only. To do case conversions on non-ASCII characters, load the ICU extension. </p>\n</blockquote>\n"
    },
    {
        "body": "<p>From <em>within a Ruby script</em>, you can redirect <code>stdout</code> and <code>stderr</code> with the <a href=\"http://ruby-doc.org/core/classes/IO.html#M000890\"><code>IO#reopen</code></a> method.</p>\n\n<pre><code># a.rb\n$stdout.reopen(\"out.txt\", \"w\")\n$stderr.reopen(\"err.txt\", \"w\")\n\nputs 'normal output'\nwarn 'something to stderr'\n</code></pre>\n\n<pre>\n$ ls\na.rb\n$ ruby a.rb\n$ ls\na.rb    err.txt out.txt\n$ cat err.txt \nsomething to stderr\n$ cat out.txt \nnormal output\n</pre>\n"
    },
    {
        "body": "<p>You should be able to use a caret (^) <a href=\"http://windowsitpro.com/article/articleid/39047/how-can-i-pass-a-percent-sign--value-to-regexe.html\" rel=\"nofollow\">to escape a percent sign</a>.</p>\n\n<p>The reason <code>%2</code> is disappearing is that the batch file is substituting the second argument passed in, and your seem to not have a second argument.  One way to work around that would be to actually try <code>foo.bat ^%1 ^%2...</code> so that when a <code>%2</code> is encountered in a command, it is actually substituted with a literal <code>%2</code>.</p>\n"
    },
    {
        "body": "<p><code>y is x</code> will be True, <code>y is z</code> will be <code>False</code>.</p>\n"
    },
    {
        "body": "<p><a href=\"http://wyday.com/wyupdate/\" rel=\"nofollow\">WyUpdate</a> is the way to go here.  We've been using it for over a year with great results (they have excellent support too).</p>\n\n<p>It actually uses patches to update files so that when a 5MB executable only has a small change, the client only has to download a file in the order of kilobytes.</p>\n\n<p>They supply an automatic update component for either Windows Forms or WPF that looks nice and works great.</p>\n\n<p>You can host the update files on either an FTP server or a normal website without any server-side configuration.</p>\n\n<p>There's plenty more to it, and the best place to start is with <a href=\"http://wyday.com/wybuild/help/quickintro.php\" rel=\"nofollow\">their video tutorial</a> of how to set up an update.</p>\n"
    },
    {
        "body": "<p>Today it's one line, next week it's twenty lines.</p>\n\n<p>Putting tests in place now warns you if you mistakenly break the behavior down the road.</p>\n\n<p>Use your best judgment as to whether it's something that has any chance of changing in the future.</p>\n"
    },
    {
        "body": "<p>The <a href=\"http://msdn.microsoft.com/en-us/library/bb337697.aspx\" rel=\"nofollow\"><code>.Any()</code> extension method</a> was designed for this case.</p>\n"
    }
    ]
}

FlackFixtures.comments = {
    "items": [
    {
        "body": "You might try cloning that repository.  Cloning should only take the &quot;necessary&quot; objects into a new repo, so as long as that loose object is really &quot;unnecessary&quot; for your clone, you might have a corruption-free repo in your clone."
    },
    {
        "body": "BTW, <code>$(this.el).toggleClass(&quot;selected&quot;)</code>. Or even shorter to <code>this.model.selected = $(this.el).toggleClass(&#39;selected&quot;).hasClass(&quot;selected&quot;);</code>."
    },
    {
        "body": "You could possibly get by with a <a href=\"http://wiki.python.org/moin/PythonDecorators\" rel=\"nofollow\">decorator</a>..."
    },
    {
        "body": "Check out <a href=\"http://jurassic.codeplex.com/\" rel=\"nofollow\">Jurassic</a> too."
    },
    {
        "body": "It doesn&#39;t answer the question, but if your binaries are for Windows or Linux you can use <a href=\"http://upx.sourceforge.net/\" rel=\"nofollow\">UPX</a> to reduce the size."
    },
    {
        "body": "You probably don&#39;t want to switch from Bugzilla, but FWIW Redmine supports this setup, where it will scan your repository and mark issues as closed or fixed.  It will even support syntax like <code>References #123</code> and then include that commit in the details for issue #123."
    },
    {
        "body": "@dagda1: A tag can be thought of similar to an &quot;extra note&quot; on a commit.  You use a tag when you want to know exactly which commit corresponds to something particular -- in this case, the commit that was used to build version 1.0.0 of the software.  On the other hand, a branch is just a named pointer to commits, that can move as you make more commits.  So tags are important <i>after</i> development, branches are important <i>during</i> development."
    },
    {
        "body": "@Constantin: That&#39;s right.  The OP seemed to edit the question to include a diagram requirement, well after I answered here."
    },
    {
        "body": "Try the import twice.  I&#39;ve come across a couple libraries that don&#39;t initialize correctly for some reason, and a second, identical import worked okay even though the first raised an exception."
    },
    {
        "body": "Needs a language tag if you want any relevant answers."
    },
    {
        "body": "@Uwe: That&#39;s weird, it&#39;s up for me now and when I posted the answer.  <a href=\"http://www.downforeveryoneorjustme.com/wyday.com\" rel=\"nofollow\">downforeveryoneorjustme.com/wyday.com</a> agrees with me."
    },
    {
        "body": "Tagging as <a href=\"http://www.cdf.utoronto.ca/~csc148h/winter/assignments/a3/trie.py\" rel=\"nofollow\">homework</a>."
    },
    {
        "body": "What&#39;s wrong with <code>if (n == 0) { return x; }</code> ?"
    },
    {
        "body": "<a href=\"http://www.google.com/images?q=planet+scale\" rel=\"nofollow\">Most depictions of planets to scale</a> use several views, where each view has the largest planet of the previous view and the smallest planet in the current.  Not sure if that helps or not."
    },
    {
        "body": "Why wouldn&#39;t you just have two separate functions, one accepting a name and the other accepting a type?  This approach seems like it would only confuse consumers of the API."
    },
    {
        "body": "Why use your own LINQ implementation when you could use the existing <a href=\"http://code.google.com/p/linqbridge/\" rel=\"nofollow\">linqbridge</a>?"
    },
    {
        "body": "possible duplicate of <a href=\"http://stackoverflow.com/questions/1501921/go-to-matching-brace-in-visual-studio\">Go to Matching Brace in Visual Studio?</a>"
    },
    {
        "body": "@Ivan: Since it&#39;s running in debug mode, you probably have some room to tweak settings as necessary.  Start out with a value like 250k, and if your application is too database-intensive to fit its log in there, increase the size as necessary."
    },
    {
        "body": "<a href=\"http://stackoverflow.com/questions/3529917/nunit-secondary-thread-exception\">This question</a> suggests it is possible to set up an <code>UnhandledExceptionHandler</code> with NUnit; are you sure it is being set up in the <code>LogClient</code> constructor?  Try setting up the handler explicitly in the test."
    },
    {
        "body": "To me, this kind of sounds like a variation of Sudoku (in that you need to &quot;fill in the blanks&quot; according to some set of rules).  Looking up Sudoku solvers just might give you a kick-start if the posted answers haven&#39;t yet."
    },
    {
        "body": "What is it you&#39;re trying to do that you need the changes listed in the commit message?  You might just have a misunderstanding with a particular tool, and we might be able to help you work around the actual problem."
    },
    {
        "body": "Obligatory: <a href=\"http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/\" title=\"regex match open tags except xhtml self contained tags\">stackoverflow.com/questions/1732348/&hellip;</a>"
    },
    {
        "body": "@Tobias: Another option would be to apply e.g. the <a href=\"http://nunit.org/index.php?p=explicit&amp;r=2.5.9\" rel=\"nofollow\"><code>Explicit</code> attribute</a> to the test so that it isn&#39;t run with Hudson, but you can still run it manually.  But at this point I&#39;d really start leaning towards mocking out the clipboard."
    },
    {
        "body": "@John: I haven&#39;t looked at AV Bible in any depth yet.  The <a href=\"http://www.avbible.net/pageSDK/pageSDK.html\" rel=\"nofollow\">SDK page</a> offers example C++ and C# code; I suspect that they only offer the actual binary file, so most likely you either drop in their example C# code if you&#39;re using a .NET server, or you generally copy the C# class(es) to a PHP or Ruby (or whatever) class.  In either case, the binary file should be sufficient (and if you wanted a different translation, that format should be an excellent starting point)."
    },
    {
        "body": "See also my accepted answer here: <a href=\"http://stackoverflow.com/questions/3019508/c-string-formatting/3019525#3019525\" title=\"c string formatting\">stackoverflow.com/questions/3019508/c-string-formatting/&hellip;</a>"
    },
    {
        "body": "You can&#39;t rely on it in PHP: <a href=\"http://stackoverflow.com/questions/1921422/php-nested-conditional-operator-bug\" title=\"php nested conditional operator bug\">stackoverflow.com/questions/1921422/&hellip;</a>"
    },
    {
        "body": "@user: It&#39;s not necessarily a matter of time so much as a matter of compatibility, both forwards and backwards."
    },
    {
        "body": "@Zardoz: If what you are attempting to achieve a uniform distribution of all letters and numbers in all 10 positions, then your approach is inherently flawed.  If you just want something &quot;kind of&quot; random, keep up this approach.  A better approach toward uniformity would be to generate each character on its own as you suggest."
    },
    {
        "body": "Possibly relevant: <a href=\"http://stackoverflow.com/questions/118984/how-can-you-program-if-youre-blind\">How can you program if you&#39;re blind?</a>, <a href=\"http://stackoverflow.com/questions/430682/best-languages-to-teach-a-blind-adult-the-basics-of-programming\">Best languages to teach a blind adult the basics of programming</a>."
    },
    {
        "body": "Unless pi has become exactly 1. :X"
    }
    ]
}

FlackFixtures.questions = {
    "items": [
    {
        "body": "<p>I have some functions written in C that I call from Haskell.  These functions return <code>IO (CInt)</code>.  Sometimes I want to run all of the functions regardless of what any of them return, and this is easy.  For sake of example code, this is the general idea of what's happening currently:</p>\n\n<pre><code>Prelude&gt; let f x = print x &gt;&gt; return x\nPrelude&gt; mapM_ f [0..5]\n0\n1\n2\n3\n4\n5\nPrelude&gt;\n</code></pre>\n\n<p>I get my desired side effects, and I don't care about the results.  But now I need to stop execution immediately after the first item that doesn't return my desired result.  Let's say a return value of 4 or higher requires execution to stop - then what I <em>want</em> to do is this:</p>\n\n<pre><code>Prelude&gt; takeWhile (&lt;4) $ mapM f [0..5]\n</code></pre>\n\n<p>Which gives me this error:</p>\n\n<pre>\n&lt;interactive>:1:22:\n    Couldn't match expected type `[b]' against inferred type `IO a'\n    In the first argument of `mapM', namely `f'\n    In the second argument of `($)', namely `mapM f ([0 .. 5])'\n    In the expression: takeWhile (&lt; 4) $ mapM f ([0 .. 5])</pre>\n\n<p>And that makes sense to me - the result is still contained in the IO monad, and I can't just compare two values contained in the IO monad.  I know this is precisely the purpose of monads -- chaining results together and discarding operations when a certain condition is met -- but is there an easy way to \"wrap up\" the IO monad in this case to stop executing the chain upon a condition of my choosing, without writing an instance of <code>MonadPlus</code>?  </p>\n\n<p>Can I just \"unlift\" the values from <code>f</code>, for the purposes of the takeWhile?  </p>\n\n<p>Is this a solution where functors fit?  Functors haven't \"clicked\" with me yet, but I sort of have the impression that this might be a good situation to use them.</p>\n\n<p><hr/>\n<strong>Update:</strong></p>\n\n<p>@sth has the closest answer to what I want - in fact, that's almost exactly what I was going for, but I'd still like to see whether there is a <em>standard</em> solution that isn't explicitly recursive -- this is Haskell, after all!  Looking back on how I worded my question, now I can see that I wasn't clear enough about my desired behavior.</p>\n\n<p>The <code>f</code> function I used above for an example was merely an example.  The real functions are written in C and used exclusively for their side effects.  I can't use @Tom's suggestion of <code>mapM_ f (takeWhile (&lt;4) [0..5])</code> because I have no idea whether any input will really result in success or failure until executed.</p>\n\n<p>I don't actually care about the returned list, either -- I just want to call the C functions until either the list is exhausted or the first C function returns a failure code.</p>\n\n<p>In C-style pseudocode, my behavior would be:</p>\n\n<pre><code>do {\n    result = function_with_side_effects(input_list[index++]);\n} while (result == success &amp;&amp; index &lt; max_index);\n</code></pre>\n\n<p>So again, @sth's answer performs the exact behavior that I want, except that the results may (should?) be discarded.  A <code>dropWhileM_</code> function would be equivalent for my purposes.  Why isn't there a function like that or <code>takeWhileM_</code> in Control.Monad?  I see that there was <a href=\"http://osdir.com/ml/libraries@haskell.org/2009-05/msg00031.html\" rel=\"nofollow\">a similar discussion on a mailing list</a>, but it appears that nothing has come of that.</p>\n"
    },
    {
        "body": "<p>Suppose I have the following contrived code:</p>\n\n<pre><code>abstract class Root\n{\n  public abstract void PrintHierarchy();\n}\n\nclass Level1 : Root\n{\n  override public void PrintHierarchy()\n  {\n    Console.WriteLine(\"Level1 is a child of Root\");\n  }\n}\n\nclass Level2 : Level1\n{\n  override public void PrintHierarchy()\n  {\n    Console.WriteLine(\"Level2 is a child of Level1\");\n    base.PrintHierarchy();\n  }\n}\n</code></pre>\n\n<p>If I am only looking at the <code>Level2</code> class, I can immediately see that <code>Level2.PrintHierarchy</code> follows <a href=\"http://en.wikipedia.org/wiki/Open/closed_principle\" rel=\"nofollow\">the open/closed principle</a> because it does something on its own and it calls the base method that it is overriding.</p>\n\n<p>However, if I only look at the <code>Level1</code> class, it appears to be in violation of OCP because it does not call <code>base.PrintHierarchy</code> -- in fact, in C#, the compiler forbids it with the error \"Cannot call an abstract base member\".</p>\n\n<p>The only way to make <code>Level1</code> appear to follow OCP is to change <code>Root.PrintHierarchy</code> to an empty virtual method, but then I can no longer rely on the compiler to enforce deriving classes to implement <code>PrintHierarchy</code>.</p>\n\n<p>The real issue I'm having while maintaining code here is seeing dozens of <code>override</code> methods that do not call <code>base.Whatever()</code>.  If <code>base.Whatever</code> is abstract, then fine, but if not, then the <code>Whatever</code> method might be a candidate to be pulled into an interface rather than a concrete override-able method -- or the class or method need to be refactored in some other fashion, but either way, it clearly indicates poor design.</p>\n\n<p>Short of memorizing that <code>Root.PrintHierarchy</code> is abstract or putting a comment inside <code>Level1.PrintHierarchy</code>, do I have any other options to quickly identify whether a class formed like <code>Level1</code> is violating OCP?</p>\n\n<hr>\n\n<p>There's been a lot of good discussion in the comments, and some good answers too.  I was having trouble figuring out exactly what to ask here.  I think what is frustrating me is that, <a href=\"http://stackoverflow.com/questions/3883841/abstract-methods-and-the-open-closed-principle/3884070#3884070\">as @Jon Hanna points out</a>, sometimes a virtual method simply indicates \"You must implement me\" whereas other times it means \"you must extend me -- if you fail to call the base version, you break my design!\"  But C# doesn't offer any way to indicate which of those you mean, other than that abstract or interface clearly is a \"must implement\" situation.  (Unless there's something in Code Contracts, which is a little out of scope here, I think).</p>\n\n<p>But if a language <em>did</em> have a must-implement vs. must-extend decorator, it would probably create huge problems for unit-testing if it couldn't be disabled.  Are there any languages like that?  This sounds rather like <a href=\"http://en.wikipedia.org/wiki/Design_by_contract\" rel=\"nofollow\">design-by-contract</a>, so I wouldn't be surprised if it were in Eiffel, for instance.</p>\n\n<p>The end result is probably <a href=\"http://stackoverflow.com/questions/3883841/abstract-methods-and-the-open-closed-principle/3891361#3891361\">as @Jordão says</a>, and it's completely contextual; but I'm going to leave the discussion open for a while before I accept any answers still.</p>\n"
    },
    {
        "body": "<p><a href=\"http://www.kernel.org/pub/software/scm/git/docs/git-gc.html\" rel=\"nofollow\"><code>man git-gc</code></a> doesn't have an obvious answer in it, and I haven't had any luck with Google either (although I might have just been using the wrong search terms).</p>\n\n<p>I understand that you should occasionally run <code>git gc</code> on a local repository to prune dangling objects and compress history, among other things -- but is a shared bare repository susceptible to these same issues?</p>\n\n<p>If it matters, our workflow is multiple developers pulling from and pushing to a bare repository on a shared network drive. The \"central\" repository was created with <code>git init --bare --shared</code>.</p>\n"
    },
    {
        "body": "<p>I understand <em>how</em> a language can bootstrap itself, but I haven't been able to find much reference on <em>why</em> you should consider bootstrapping.</p>\n\n<p>The intuitive answer is that the language you're writing offers utilities that are not found in the \"base\" language of the compiler, <em>and</em> the language's features are relatively well-suited for a compiler.</p>\n\n<p>For instance, it would make sense to bootstrap a C++ compiler -- it could potentially be much easier to maintain the compiler when OOP is properly used, as opposed to using plain C.</p>\n\n<p>On the other hand, MATLAB certainly makes matrix math a lot easier than plain C, but I can't see any apparent benefits from writing a MATLAB compiler/interpreter in MATLAB -- it seems like it would become <em>less</em> maintainable.  A similar view could be applied to the R programming language.  Or a pretty extreme example would be bootstrapping <a href=\"http://compsoc.dur.ac.uk/whitespace/\" rel=\"nofollow\">Whitespace</a>, which is written in Haskell -- definitely a massive <em>super</em>set of Whitespace.</p>\n\n<p>Is the only reason for bootstrapping to take advantage of the new language's features?  I know there's also the \"because we can\" reason, but that's not what I'm looking for :)</p>\n"
    },
    {
        "body": "<p>This is probably a really easy question to answer, but for some reason I'm really struggling with it.</p>\n\n<p>I have a DLL written in C to access hardware at a protocol level, and I want to write a Haskell program that calls some of those C functions.  Here's a snippet of the relevant C header (with names just slightly obfuscated due to possible copyrighting issues):</p>\n\n<pre><code>#ifdef HWDRIVER_EXPORTS\n#define HWDRIVER_API __declspec(dllexport)\n#else\n#define HWDRIVER_API __declspec(dllimport)\n#endif\nHWDRIVER_API int HW_Init(void);\n</code></pre>\n\n<p>This has been compiled as a DLL in Visual Studio 2003, and I have successfully loaded the DLL from both C and C#, so I am confident that the DLL works fine.  The DLL is named \"hw-driver.dll\".</p>\n\n<p>Next, here's the Haskell source code just to test if I can properly load the DLL and call the simplest function in it:</p>\n\n<pre><code>{-# LANGUAGE ForeignFunctionInterface #-}\nmodule Main\n    where\nimport Foreign\nimport Foreign.C\n\nforeign import stdcall \"hw-driver\" \"HW_Init\"  hwInit :: IO (CInt)\n\nmain = do\n    x &lt;- hwInit\n    if x == 0 \n        then putStr \"Successfully initialized\"\n        else putStr \"Could not initialize\"\n</code></pre>\n\n<p>The line that is giving me trouble is the foreign import line.  As I understand it, the syntax is foreign (import/export) (ccall/stdcall) <em>library-name</em> <em>C-function-name</em> <em>haskell-function-name</em> :: <em>Haskell type declaration</em>.  So mine should be foreign import stdcall (because you use stdcall when loading a DLL in Win32) \"hw-driver\" (because the file is named \"hw-driver.dll\" and it is located in the same directory as dlltest.hs) \"HW_Init\" (the name of the function in C) hwInit :: IO (Cint) (void arguments, returning an int).</p>\n\n<p>However, when I try running <code>ghci dlltest.hs</code>, I get the following output:</p>\n\n<pre><code>[1 of 1] Compiling Main             ( dlltest.hs, interpreted )\n\ndlltest.hs:8:43: parse error on input `\"'\nFailed, modules loaded: none.\n</code></pre>\n\n<p>Line 8, column 43 is the first quotation mark on HW_Init.  Okay, so maybe I have to put both the library name and the function name in one string, I've seen that in a few places.  If I try running that, then I get:</p>\n\n<pre><code>[1 of 1] Compiling Main             ( dlltest.hs, interpreted )\n\ndlltest.hs:8:23: Malformed entity string\nFailed, modules loaded: none.\n</code></pre>\n\n<p>8:23 is the first quotation mark of the new string \"hw-driver HW_Init\".</p>\n\n<p>I don't believe there's anything wrong with my ghc setup (6.10.3), because I can run the following code that was copy-pasted from Real World Haskell in ghci:</p>\n\n<pre><code>{-- snippet pragma --}\n{-# LANGUAGE ForeignFunctionInterface #-}\n{-- /snippet pragma --}\n\n{-- snippet imports --}\nimport Foreign\nimport Foreign.C.Types\n{-- /snippet imports --}\n\n{-- snippet binding --}\nforeign import ccall \"math.h sin\"\n     c_sin :: CDouble -&gt; CDouble\n{-- /snippet binding --}\n\n{-- snippet highlevel --}\nfastsin :: Double -&gt; Double\nfastsin x = realToFrac (c_sin (realToFrac x))\n{-- /snippet highlevel --}\n\n{-- snippet use --}\nmain = mapM_ (print . fastsin) [0/10, 1/10 .. 10/10]\n{-- /snippet use --}\n</code></pre>\n\n<p>So long question short, how do I properly declare a foreign import on a Win32 DLL?  I haven't been able to find <em>anything</em> on Google.</p>\n\n<p>And to kind of tag along on that question, will I be able to use a program like c2hs or hsc2hs to parse the header file <code>hw-driver.h</code> so I don't have to manually write the foreign import calls for all 20-25 functions contained in that DLL?  I haven't been able to find any decent examples of that either.</p>\n\n<p><hr/></p>\n\n<p>EDIT: ephemient has pointed out that the correct syntax for the foreign import line is:</p>\n\n<pre><code>foreign import stdcall \"hw-driver.h HW_Init\" hwInit :: IO CInt\n</code></pre>\n\n<p>With this, I am able to call <code>ghci dlltest.hs -lhw-driver</code> and properly call the main function with a successful return code.  However, the command <code>ghc --make dlltest.hs -lhw-driver</code> fails with a linker error.  So, here's the verbose output of that command (note that I have all of hw-driver.{dll,h,lib} in the working directory):</p>\n\n<pre><code>Glasgow Haskell Compiler, Version 6.10.3, for Haskell 98, stage 2 booted by GHC version 6.10.1\nUsing package config file: C:\\ghc\\ghc-6.10.3\\package.conf\nhiding package base-3.0.3.1 to avoid conflict with later version base-4.1.0.0\nwired-in package ghc-prim mapped to ghc-prim-0.1.0.0\nwired-in package integer mapped to integer-0.1.0.1\nwired-in package base mapped to base-4.1.0.0\nwired-in package rts mapped to rts-1.0\nwired-in package haskell98 mapped to haskell98-1.0.1.0\nwired-in package syb mapped to syb-0.1.0.1\nwired-in package template-haskell mapped to template-haskell-2.3.0.1\nwired-in package dph-seq mapped to dph-seq-0.3\nwired-in package dph-par mapped to dph-par-0.3\nHsc static flags: -static\n*** Chasing dependencies:\nChasing modules from: *dlltest.hs\nStable obj: [Main]\nStable BCO: []\nReady for upsweep\n  [NONREC\n      ModSummary {\n         ms_hs_date = Mon Jun 22 13:20:05 Eastern Daylight Time 2009\n         ms_mod = main:Main,\n         ms_imps = [Foreign.C, Foreign]\n         ms_srcimps = []\n      }]\ncompile: input file dlltest.hs\nCreated temporary directory: C:\\DOCUME~1\\CHRISC~1\\LOCALS~1\\Temp\\/ghc4428_0\n*** Checking old interface for main:Main:\n[1 of 1] Skipping  Main             ( dlltest.hs, dlltest.o )\n*** Deleting temp files:\nDeleting: C:\\DOCUME~1\\CHRISC~1\\LOCALS~1\\Temp\\/ghc4428_0/ghc4428_0.s\nWarning: deleting non-existent C:\\DOCUME~1\\CHRISC~1\\LOCALS~1\\Temp\\/ghc4428_0/ghc4428_0.s\nUpsweep completely successful.\n*** Deleting temp files:\nDeleting: \nlink: linkables are ...\nLinkableM (Mon Jun 22 13:22:26 Eastern Daylight Time 2009) main:Main\n   [DotO dlltest.o]\nLinking dlltest.exe ...\n*** Windres:\nC:\\ghc\\ghc-6.10.3\\bin/windres --preprocessor=\"C:\\ghc\\ghc-6.10.3\\gcc\" \"-BC:\\ghc\\ghc-6.10.3\\gcc-lib/\" \"-IC:\\ghc\\ghc-6.10.3\\include/mingw\" \"-E\" \"-xc\" \"-DRC_INVOKED\" --use-temp-file --input=C:\\DOCUME~1\\CHRISC~1\\LOCALS~1\\Temp\\/ghc4428_0/ghc4428_0.rc --output=C:\\DOCUME~1\\CHRISC~1\\LOCALS~1\\Temp\\/ghc4428_0/ghc4428_0.o --output-format=coff\n*** Linker:\nC:\\ghc\\ghc-6.10.3\\gcc -BC:\\ghc\\ghc-6.10.3\\gcc-lib/ -IC:\\ghc\\ghc-6.10.3\\include/mingw -v -o dlltest.exe -DDONT_WANT_WIN32_DLL_SUPPORT dlltest.o -lhw-driver C:\\DOCUME~1\\CHRISC~1\\LOCALS~1\\Temp\\/ghc4428_0/ghc4428_0.o -LC:\\ghc\\ghc-6.10.3\\base-4.1.0.0 -LC:\\ghc\\ghc-6.10.3\\integer-0.1.0.1 -LC:\\ghc\\ghc-6.10.3\\ghc-prim-0.1.0.0 -LC:\\ghc\\ghc-6.10.3 -LC:\\ghc\\ghc-6.10.3/gcc-lib -lHSbase-4.1.0.0 -lwsock32 -lmsvcrt -lkernel32 -luser32 -lshell32 -lHSinteger-0.1.0.1 -lHSghc-prim-0.1.0.0 -lHSrts -lm -lffi -lgmp -lwsock32 -u _ghczmprim_GHCziTypes_Izh_static_info -u _ghczmprim_GHCziTypes_Czh_static_info -u _ghczmprim_GHCziTypes_Fzh_static_info -u _ghczmprim_GHCziTypes_Dzh_static_info -u _base_GHCziPtr_Ptr_static_info -u _base_GHCziWord_Wzh_static_info -u _base_GHCziInt_I8zh_static_info -u _base_GHCziInt_I16zh_static_info -u _base_GHCziInt_I32zh_static_info -u _base_GHCziInt_I64zh_static_info -u _base_GHCziWord_W8zh_static_info -u _base_GHCziWord_W16zh_static_info -u _base_GHCziWord_W32zh_static_info -u _base_GHCziWord_W64zh_static_info -u _base_GHCziStable_StablePtr_static_info -u _ghczmprim_GHCziTypes_Izh_con_info -u _ghczmprim_GHCziTypes_Czh_con_info -u _ghczmprim_GHCziTypes_Fzh_con_info -u _ghczmprim_GHCziTypes_Dzh_con_info -u _base_GHCziPtr_Ptr_con_info -u _base_GHCziPtr_FunPtr_con_info -u _base_GHCziStable_StablePtr_con_info -u _ghczmprim_GHCziBool_False_closure -u _ghczmprim_GHCziBool_True_closure -u _base_GHCziPack_unpackCString_closure -u _base_GHCziIOBase_stackOverflow_closure -u _base_GHCziIOBase_heapOverflow_closure -u _base_ControlziExceptionziBase_nonTermination_closure -u _base_GHCziIOBase_blockedOnDeadMVar_closure -u _base_GHCziIOBase_blockedIndefinitely_closure -u _base_ControlziExceptionziBase_nestedAtomically_closure -u _base_GHCziWeak_runFinalizzerBatch_closure -u _base_GHCziTopHandler_runIO_closure -u _base_GHCziTopHandler_runNonIO_closure -u _base_GHCziConc_runHandlers_closure -u _base_GHCziConc_ensureIOManagerIsRunning_closure\nReading specs from C:/ghc/ghc-6.10.3/gcc-lib/specs\nConfigured with: ../gcc-3.4.5-20060117-3/configure --with-gcc --with-gnu-ld --with-gnu-as --host=mingw32 --target=mingw32 --prefix=/mingw --enable-threads --disable-nls --enable-languages=c,c++,f77,ada,objc,java --disable-win32-registry --disable-shared --enable-sjlj-exceptions --enable-libgcj --disable-java-awt --without-x --enable-java-gc=boehm --disable-libgcj-debug --enable-interpreter --enable-hash-synchronization --enable-libstdcxx-debug\nThread model: win32\ngcc version 3.4.5 (mingw-vista special r3)\n C:/ghc/ghc-6.10.3/gcc-lib/collect2.exe -Bdynamic -o dlltest.exe -u _ghczmprim_GHCziTypes_Izh_static_info -u _ghczmprim_GHCziTypes_Czh_static_info -u _ghczmprim_GHCziTypes_Fzh_static_info -u _ghczmprim_GHCziTypes_Dzh_static_info -u _base_GHCziPtr_Ptr_static_info -u _base_GHCziWord_Wzh_static_info -u _base_GHCziInt_I8zh_static_info -u _base_GHCziInt_I16zh_static_info -u _base_GHCziInt_I32zh_static_info -u _base_GHCziInt_I64zh_static_info -u _base_GHCziWord_W8zh_static_info -u _base_GHCziWord_W16zh_static_info -u _base_GHCziWord_W32zh_static_info -u _base_GHCziWord_W64zh_static_info -u _base_GHCziStable_StablePtr_static_info -u _ghczmprim_GHCziTypes_Izh_con_info -u _ghczmprim_GHCziTypes_Czh_con_info -u _ghczmprim_GHCziTypes_Fzh_con_info -u _ghczmprim_GHCziTypes_Dzh_con_info -u _base_GHCziPtr_Ptr_con_info -u _base_GHCziPtr_FunPtr_con_info -u _base_GHCziStable_StablePtr_con_info -u _ghczmprim_GHCziBool_False_closure -u _ghczmprim_GHCziBool_True_closure -u _base_GHCziPack_unpackCString_closure -u _base_GHCziIOBase_stackOverflow_closure -u _base_GHCziIOBase_heapOverflow_closure -u _base_ControlziExceptionziBase_nonTermination_closure -u _base_GHCziIOBase_blockedOnDeadMVar_closure -u _base_GHCziIOBase_blockedIndefinitely_closure -u _base_ControlziExceptionziBase_nestedAtomically_closure -u _base_GHCziWeak_runFinalizzerBatch_closure -u _base_GHCziTopHandler_runIO_closure -u _base_GHCziTopHandler_runNonIO_closure -u _base_GHCziConc_runHandlers_closure -u _base_GHCziConc_ensureIOManagerIsRunning_closure C:/ghc/ghc-6.10.3/gcc-lib/crt2.o C:/ghc/ghc-6.10.3/gcc-lib/crtbegin.o -LC:\\ghc\\ghc-6.10.3\\base-4.1.0.0 -LC:\\ghc\\ghc-6.10.3\\integer-0.1.0.1 -LC:\\ghc\\ghc-6.10.3\\ghc-prim-0.1.0.0 -LC:\\ghc\\ghc-6.10.3 -LC:\\ghc\\ghc-6.10.3/gcc-lib -LC:/ghc/ghc-6.10.3/gcc-lib dlltest.o -lhw-driver C:\\DOCUME~1\\CHRISC~1\\LOCALS~1\\Temp\\/ghc4428_0/ghc4428_0.o -lHSbase-4.1.0.0 -lwsock32 -lmsvcrt -lkernel32 -luser32 -lshell32 -lHSinteger-0.1.0.1 -lHSghc-prim-0.1.0.0 -lHSrts -lm -lffi -lgmp -lwsock32 -lmingw32 -lgcc -lmoldname -lmingwex -lmsvcrt -luser32 -lkernel32 -ladvapi32 -lshell32 -lmingw32 -lgcc -lmoldname -lmingwex -lmsvcrt C:/ghc/ghc-6.10.3/gcc-lib/crtend.o\nC:\\ghc\\ghc-6.10.3\\gcc-lib\\ld.exe: cannot find -lhw-driver\ncollect2: ld returned 1 exit status\n*** Deleting temp files:\nDeleting: C:\\DOCUME~1\\CHRISC~1\\LOCALS~1\\Temp\\/ghc4428_0/ghc4428_0.o C:\\DOCUME~1\\CHRISC~1\\LOCALS~1\\Temp\\/ghc4428_0/ghc4428_0.rc\n*** Deleting temp dirs:\nDeleting: C:\\DOCUME~1\\CHRISC~1\\LOCALS~1\\Temp\\/ghc4428_0\n</code></pre>\n\n<p><hr/>\nAs it turns out, the actual linking wasn't as difficult as I was making it out to be.  I was using <code>foreign import</code> <strong><code>stdcall</code></strong> which I believed to be correct with a DLL built in Visual Studio 2003.  I had to download the <code>pexports</code> tool for MinGW, which lists the functions exported from a DLL.  The linker had been looking for HWInit@0 the whole time, but <code>pexports</code> said the DLL was exporting just HWInit.</p>\n\n<p>I changed my line to <code>foreign import</code> <strong><code>ccall</code></strong> instead, and I was successfully able to link the program using either of <code>ghc --make dlltest.hs hw-driver.lib</code> or <code>ghc --make dlltest.hs -L. -lhw-driver</code> due to having both the .lib and the .dll file available in the working directory.</p>\n"
    },
    {
        "body": "<p>It's common knowledge that you shouldn't use a StringBuilder in place of a small number of concatenations:</p>\n\n<pre><code>string s = \"Hello\";\nif (greetingWorld)\n{\n    s += \" World\";\n}\n\ns += \"!\";\n</code></pre>\n\n<p>However, in loops of a significant size, StringBuilder is the obvious choice:</p>\n\n<pre><code>string s = \"\";\nforeach (var i in Enumerable.Range(1,5000))\n{\n    s += i.ToString(); // &lt;- bad idea!\n}\n\nConsole.WriteLine(s);\n</code></pre>\n\n<p>Is there a tool that I can run on either raw C# source or a compiled assembly to identify <strong>where</strong> in the source code that <code>String.Concat</code> is being called?  (If you're not familiar, <code>s += \"foo\"</code> is mapped to <code>String.Concat</code> in the IL output.)  Obviously, I can't realistically search through an entire project and evaluate every <code>+=</code> to identify whether the lvalue is a string.</p>\n\n<p>Ideally, it would only point out calls inside a for/foreach loop, but I would even put up with all the false positives of noting <em>every</em> <code>String.Concat</code>.  Also, I'm aware that there are some refactoring tools that will automatically refactor my code to use <code>StringBuilder</code>, but I am only interested in identifying the <code>Concat</code> usage at this point.</p>\n\n<p>I routinely run Gendarme and FxCop on my code, and neither of those tools identify what I've described.  However, as <a href=\"http://stackoverflow.com/questions/2804554/tool-to-detect-use-abuse-of-string-concat-where-stringbuilder-should-be-used/2804849#2804849\">@Cristian pointed out</a>, older versions of FxCop used to check for this.  Maybe there's a way to extract just that rule from an old version of FxCop and tell the newer version (1.36) to use it?</p>\n"
    },
    {
        "body": "<p>For a utility I'm working on, the client would like to be able to generate graphic reports on the data that has been collected.  I can already generate a couple canned graphs (using ZedGraph, which is a very nice library); however, the utility would be much more flexible if the graphs were more programmable or configurable by the end-user.</p>\n\n<h1>TLDR version</h1>\n\n<p>I want users to be able to use something like SQL to <strong>safely</strong> extract and select data from a List of objects that I provide and can describe.  What free tools or libraries will help me accomplish this?</p>\n\n<h1>Full version</h1>\n\n<p>I've given thought to using IronPython, IronRuby, and LuaInterface, but frankly they're all a bit overpowered for what I want to do.  My classes are fairly simple, along the lines of:</p>\n\n<pre><code>class Person:\n    string Name;\n    int HeightInCm;\n    DateTime BirthDate;\n    Weight[] WeighIns;\n\nclass Weight:\n    int WeightInKg;\n    DateTime Date;\n    Person Owner;\n</code></pre>\n\n<p>(exact classes have been changed to protect the innocent).</p>\n\n<p>To come up with the data for the graph, the user will choose whether it's a bar graph, scatter plot, etc., and then to actually obtain the data, I would like to obtain some kind of List from the user simply entering something SQL-ish along the lines of</p>\n\n<pre><code>SELECT Name, AVG(WeighIns) FROM People\nSELECT WeightInKg, Owner.HeightInCm FROM Weights\n</code></pre>\n\n<p>And as a bonus, it would be nice if you could actually do operations as well:</p>\n\n<pre><code>SELECT WeightInKg, (Date - Owner.BirthDate) AS Age FROM Weights\n</code></pre>\n\n<p>The DSL doesn't have to be compliant SQL in any way; it doesn't even have to resemble SQL, but I can't think of a more efficient descriptive language for the task.</p>\n\n<p>I'm fine filling in blanks; I don't expect a library to do <em>everything</em> for me.  What I would expect to exist (but haven't been able to find in any way, shape, or form) is something like Fluent NHibernate (which I am already using in the project) where I can declare a mapping, something like</p>\n\n<pre><code>var personRequest = Request&lt;Person&gt;();\npersonRequest.Item(\"Name\", (p =&gt; p.Name));\npersonRequest.Item(\"HeightInCm\", (p =&gt; p.HeightInCm));\npersonRequest.Item(\"HeightInInches\", (p =&gt; p.HeightInCm * CM_TO_INCHES));\n// ...\nvar weightRequest = Request&lt;Weight&gt;();\nweightRequest.Item(\"Owner\", (w =&gt; w.Owner), personRequest); // Indicate a chain to personRequest\n// ...\nvar people = Table&lt;Person&gt;(\"People\", GetPeopleFromDatabase());\nvar weights = Table&lt;Weight&gt;(\"Weights\", GetWeightsFromDatabase());\n// ...\nTryRunQuery(userInputQuery);\n</code></pre>\n\n<p>LINQ is <em>so</em> close to what I want to do, but AFAIK there's no way to sandbox it.  I don't want to expose any unnecessary functionality to the end user; meaning I don't want the user to be able to send in and process:</p>\n\n<pre><code>from p in people select (p =&gt; { System.IO.File.Delete(\"C:\\\\something\\\\important\"); return p.Name })\n</code></pre>\n\n<p>So does anyone know of any free .NET libraries that allow something like what I've described above?  Or is there some way to sandbox LINQ?  <code>cs-script</code> is close too, but it doesn't seem to offer sandboxing yet either.  I'd be hesitant to expose the NHibernate interface either, as the user should have a read-only view of the data at this point in the usage.</p>\n\n<p>I'm using C# 3.5, and pure .NET solutions would be preferred.</p>\n\n<p>The bottom line is that I'm really trying to avoid writing my own parser for a subset of SQL that would only apply to this single project.</p>\n"
    },
    {
        "body": "<p>I realize that this rule might differ from one company's coding standards to another, but in general, which is preferred?</p>\n\n<ol>\n<li>With a space after the line-comment:</li>\n</ol>\n\n<p><code></p>\n\n<pre><code>int foo = Bar(quux + 1); // compensate for quux being off by 1\n\nfoo = Bar(quux + 1) # compensate for quux being off by 1\n</code></pre>\n\n<p></code>\n2. No space after the line comment:</p>\n\n<p><code></p>\n\n<pre><code>int foo = Bar(quux + 1); //compensate for quux being off by 1\n\nfoo = Bar(quux + 1) #compensate for quux being off by 1\n</code></pre>\n\n<p></code></p>\n\n<p>I haven't been able to find <em>anything</em> online regarding this aspect of coding style. My guess is that including a space is the preferred style for all languages, but I'd like some \"hard evidence\" to confirm or deny this.<br />\n<hr/>\nIt sounds so far like everyone has <strong>anecdotal</strong> evidence that using a space is preferred.  Can anyone point me in the direction of some official or otherwise published <strong>coding standards</strong> that directly address the issue of comment formatting and whether a space should be used?</p>\n"
    },
    {
        "body": "<p>I was curious about STL implementations outside of what's packaged with gcc or Visual Studio, so a quick Google search turned up a few results, such as:</p>\n\n<ul>\n<li><a href=\"http://stdcxx.apache.org/\" rel=\"nofollow\">Apache stdcxx</a></li>\n<li><a href=\"http://ustl.sourceforge.net/\" rel=\"nofollow\">uSTL</a></li>\n<li><a href=\"http://code.google.com/p/rdestl/\" rel=\"nofollow\">rdeSTL</a></li>\n</ul>\n\n<p>Under what circumstances should one use an alternative standard template library?</p>\n\n<p>For instance, Apache's page has a list including items such as \"full conformance to the C++ standard\" and \"optimized for fast compiles and extremely small executable file sizes\".  If it's so good, why wouldn't it replace libstdc++?</p>\n\n<p><hr>\nFor the sake of completeness, here are some of the other STL implementations:</p>\n\n<ul>\n<li><a href=\"http://www.stlport.org/\" rel=\"nofollow\">STLPort</a></li>\n<li><a href=\"http://stxxl.sourceforge.net/\" rel=\"nofollow\">STXXL</a> (which is <em>sort of</em> special purpose, meant for large data sets that won't fit in memory)</li>\n<li><a href=\"http://www.dinkumware.com/\" rel=\"nofollow\">Dinkumware</a> (commercial)</li>\n<li><a href=\"http://www.sgi.com/tech/stl/\" rel=\"nofollow\">SGI STL</a></li>\n<li><a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/\" rel=\"nofollow\">libstdc++</a> (GCC's implementation)</li>\n</ul>\n"
    },
    {
        "body": "<p>I know that weak references are a good candidate for <a href=\"http://en.wikipedia.org/wiki/Memoization\" rel=\"nofollow\">memoizing</a> potentially large sets of data, and <a href=\"http://en.wikipedia.org/wiki/Weak%5Freference\" rel=\"nofollow\">Wikipedia's article on weak references</a> only lists \"keeping track of the current variables being referenced in the application\" and the statement \"Another use of weak references is in writing a cache\".</p>\n\n<p>What are some other situations (more specific than just \"caching results\") where the use of weak references is A Good Idea<sup>TM</sup>?</p>\n"
    },
    {
        "body": "<p>Is there a historic reason that periods are used instead of any other separator for software versions?</p>\n\n<p>One of our products was previously version 3.5, and now it's 3.08 -- I'm sure this was management saying that putting a leading zero would make it less confusing for our customers once we hit 3.10.  But as a software developer, version 3.08 looks strange to me.</p>\n\n<p>If we didn't use periods, the difference between version 3:9 and 3:10 or 3-9 to 3-10 would be more apparent, because it wouldn't be read as a decimal number.  Moreover, <em>to someone who is generally unfamiliar with software versioning</em>, the decimal number seems to imply that version 3.5 is halfway to the next major release, when in reality we can't make any assumptions about the number of minor releases until the next major release.</p>\n\n<p>I understand that now we typically use periods as a convention because that's what everyone else is doing - but was there a reason for using periods in the first place?</p>\n"
    },
    {
        "body": "<p>I've confirmed this same behavior in VS2005, so I was wrong to call it a .NET (1.1) bug.</p>\n\n<p>I'm leaving the original question below, but my revised question is this: how do I get Visual Studio to give me the stack trace of the exception I've caught and re-thrown <strong>in the Call Stack window</strong>, rather than only displaying the call stack from the point of the <code>throw</code> statement?</p>\n\n<p>The situation is that I am deciding <strong>at runtime</strong> whether the global exception handler is on or off -- if it's off, I want VS to catch the exception so I can step through the call stack to figure out what went wrong.</p>\n\n<p>Previously, the global exception handler was either compiled into the program or not.  But the situation has changed, and now we need to decide at runtime -- it's looking like I might need to go back to the macro way of doing it, but without macros:</p>\n\n<pre><code>if (allow_bubble_up)\n{\n    Foo();\n}\nelse\n{\n    try\n    {\n        Foo();\n    }\n    catch (Exception e)\n    {\n       GlobalExceptionHandler(e);\n    }\n}\n</code></pre>\n\n<p>But that approach feels <strong>extremely</strong> against DRY, to me.</p>\n\n<p><hr/></p>\n\n<p>Apparently there is a bug in .NET 1.1 where if you have an empty <code>throw</code> statement to re-throw a caught exception, the stack trace is started from where that <code>throw</code> occurred, instead of the stack trace of the whole exception being re-thrown -- at least, I've seen it called a bug on a couple blogs, but I haven't been able to get much more information on it.</p>\n\n<p>To be a little more specific, the <code>StackTrace</code> property of <code>$exception</code> in QuickWatch shows the correct data, but the Call Stack window in VS only shows the call stack to the level of the throw statement.</p>\n\n<p>In this sample code, I can only see a 1-level-deep stack trace of <code>Main</code>, even though  I <em>should</em> see a stack trace of a couple calls to <code>Foo</code>.</p>\n\n<pre><code>static public void Foo(int i)\n{\n    if (i &gt; 4)\n    {\n        throw new ArgumentOutOfRangeException();\n    }\n    Foo(i + 1);\n}\n\nstatic void Main(string[] args)\n{\n    bool allow_bubble_up = true;\n    try\n    {\n        Foo(0);\n    }\n    catch (Exception e)\n    {\n        if (allow_bubble_up)\n        {\n            // stack trace just shows Main\n            throw;\n\n            // also just shows Main\n            //throw new Exception(\"asdf\", e);\n\n            // STILL just shows Main\n            //throw e;\n        }\n        else\n        {\n            System.Console.WriteLine(e);\n        }\n    }\n}\n</code></pre>\n\n<p><a href=\"http://weblogs.asp.net/fmarguerie/archive/2008/01/02/rethrowing-exceptions-and-preserving-the-full-call-stack-trace.aspx\" rel=\"nofollow\">Fabrice Marguerie's blog</a> shows how to work around re-thrown stack traces of some sort for .NET 2.0+, and at the bottom he says to check Chris Taylor's blog for how to do it in .NET 1.1.  I had to search a bit to <a href=\"http://web.archive.org/web/20080106084602/dotnetjunkies.com/WebLog/chris.taylor/archive/2004/03/03/8353.aspx\" rel=\"nofollow\">find it on archive.org</a>.  I <em>think</em> I implemented it correctly, but I still got a stack trace just at main -- his explanation wasn't terribly clear, and I'd prefer not to mess with the code base (wrap existing set of functionality in another method) any more than necessary.</p>\n\n<p>I can see the correct stack trace in the properties of the caught and re-raised exception, but the navigable stack trace that VS shows is useless since it only tracks from the <code>throw</code> statement.  If I never catch and re-throw the exception, I <em>do</em> get a full and proper stack trace.</p>\n\n<p><strong>How do I get the right stack trace displayed in VS?</strong>\nI'm hoping there's some sort of simple workaround, and that I've just been searching the wrong terms.</p>\n\n<p>And unfortunately, it has to be VS2003+C# for this.</p>\n\n<p>If it wasn't otherwise clear, here's a screenshot (you'll probably need to right-click and view image):</p>\n\n<p><img src=\"http://img257.imageshack.us/img257/1124/40727627.png\" alt=\"alt text\" /></p>\n"
    },
    {
        "body": "<p>Are there any rules of thumb as to how many catch statements you'd expect per source line of code in a large piece of software?</p>\n\n<p>For instance, in one piece of software written in C#, Visual Studio shows up about 350 lines containing the word \"catch\", and <a href=\"http://cloc.sourceforge.net/\" rel=\"nofollow\">cloc</a> reports that we have about 160k SLOC, 30k commented lines, and 15k blank lines.  160k/350 is roughly 467 lines of code per catch statement.  </p>\n\n<p>But take that with a grain of salt, because we use standard C# formatting with braces on their own lines, so who knows how many lines are just single braces out of the 160k, and that 160k is counting some files in the tree that are no longer compiled in to the application, etc.  I might guess the \"useful\" ratio to be closer to 1 catch per 400 LOC.</p>\n\n<p>At least not to my surprise, we were missing a semi-critical exception that was getting caught in an empty catch block, so now I'm going through the code base and at least printing out the exception to the debug console as a temporary measure, or becoming more specific on the exception caught.  This will of course increase the number of catches we have in the whole application, but will it bring us anywhere closer to the \"acceptable\" zone?  I have no idea if 1 catch per 467 LOC is good, just okay, or horrible even.</p>\n\n<p><hr/>\nI'm well aware of <em>why</em> not to use empty catch blocks.  The other/previous maintainers have been lazy.  And since the next release of this product is time-critical, I don't currently have the time to go in and properly fix all 300(?) poor catch statements and verify proper operation of the software (of course we have virtually no automated testing to make that easier :/ ).</p>\n\n<p>I was just looking for if there was any kind of \"gut feel\" as to how frequently one should see try-catches.  There's a couple answers saying it's context-sensitive, which is what I kind of suspected but was not sure of.</p>\n"
    },
    {
        "body": "<p>Is there a way to detect if your program was loaded through Visual Studio vs. whether it was started as a standalone executable?</p>\n\n<p>Our software has a bug reporting feature to handle unhandled exceptions -- we need to be able to distribute debug builds to our beta testers, but we don't want the bug report to go off when we are in the middle of development, because the Exceptions are a lot more useful if VS catches them with a full stack trace, etc.</p>\n\n<p>Right now, I'm disabling the bug report if <code>Application.ExecutablePath</code> includes bin\\Debug or bin\\Release, but I figure there is probably a more robust way of detecting whether the program was loaded through VS.</p>\n\n<p>Obviously, we could set up a different build with some preprocessor macros, but for the sake of the question, assume that isn't a possibility -- I don't mind adding code, but I'm trying to make the fewest modifications to the build process, which is why command-line options are kind of a last resort as well.</p>\n\n<p>If it matters, I'm using VS2003/.NET 1.1.</p>\n"
    },
    {
        "body": "<p>I'm using pyDes to encrypt some data.  I wanted to demonstrate that if you change even one bit in the key or initial value, the encrypted data would be totally different.  I set up the 16-byte key to change the last character by +/- 1, causing at least one bit to be different.  However, even when I do that, the 3 different instances of encrypted data are not all different.</p>\n\n<pre><code>from pyDes import *\n\ndata = 'Hello'\n\n# CBC : Cipher-Block-Chaining\n# \\0..\\1: arbitrary initial value for CBC\n# pad=None: let pyDes take care of padding bytes\nk1 = triple_des(\"16-byte-key-here\", CBC, \"\\0\\0\\0\\0\\0\\0\\0\\1\", pad=None, padmode=PAD_PKCS5)\nk2 = triple_des(\"16-byte-key-herf\", CBC, \"\\0\\0\\0\\0\\0\\0\\0\\1\", pad=None, padmode=PAD_PKCS5)\nk3 = triple_des(\"16-byte-key-herd\", CBC, \"\\0\\0\\0\\0\\0\\0\\0\\1\", pad=None, padmode=PAD_PKCS5)\n\nd1 = k1.encrypt(data)\nd2 = k2.encrypt(data)\nd3 = k3.encrypt(data)\n\nassert d1 != d2\nassert d2 != d3\nassert d1 != d3\n</code></pre>\n\n<p>One of the assertions seems to fail if I only make a small change to either the key or initial value; I have seen both <code>d1 != d2</code> and <code>d1 != d3</code> fail depending on what I change.  I have also tried changing <code>'Hello'</code> to <code>'Hello' * 50</code> to make sure it wasn't just a case of the input data being too short.</p>\n\n<p>If I make totally random keys, the assertions pass.  With the program as seen above, <code>d1 != d3</code> fails (those keys are one bit apart; k1-k2 are 2 bits different).</p>\n\n<p>I am by no means an encryption expert, but if two keys only one bit apart result in the same encrypted data, then that means the effort it takes to brute-force the key just went down by a factor of two, right?</p>\n\n<p>Am I missing something obvious?  Is Triple DES not supposed to give unique results for very similar keys?  Or is this a bug in PyDes?  Maybe someone else could confirm this behavior in another implementation?</p>\n\n<p><hr/>\n@Chris Jester-Young had the answer that some of the bits in the key are parity bits.  And as it turns out, according to <a href=\"http://www.tropsoft.com/strongenc/des3.htm\" rel=\"nofollow\">this article</a>:</p>\n\n<blockquote>\n  <p>Note that although the input key for DES is 64 bits long, the actual key used by DES is only 56 bits in length. The least significant (right-most) bit in each byte is a parity bit, and should be set so that there are always an odd number of 1s in every byte. These parity bits are ignored, so only the seven most significant bits of each byte are used, resulting in a key length of 56 bits. <strong>This means that the effective key strength for Triple DES is actually 168 bits because each of the three keys contains 8 parity bits that are not used during the encryption process.</strong></p>\n</blockquote>\n\n<p>(emphasis was mine)</p>\n\n<p>And those parity bits were exactly the bits I was changing in the example.</p>\n\n<p>Thanks Chris!</p>\n"
    },
    {
        "body": "<p>Many of my company's clients use our data acquisition software in a research basis.  Due to the nature of research in general, some of the clients ask that data is encrypted to prevent tampering -- there could be serious ramifications if their data was shown to be falsified.</p>\n\n<p>Some of our <em>binary</em> software encrypts output files with a password stored in the source, that looks like random characters.  At the software level, we are able to open up encrypted files for read-only operations.  If someone <em>really</em> wanted to find out the password so that they could alter data, it would be possible, but it would be a lot of work.  </p>\n\n<p>I'm looking into using Python for rapid development of another piece of software.  To duplicate the functionality of encryption to defeat/discourage data tampering, the best idea I've come up with so far is to just use <code>ctypes</code> with a DLL for file reading/writing operations, so that the method of encryption and decryption is \"sufficiently\" obfuscated.</p>\n\n<p>We are well aware that an \"uncrackable\" method is unattainable, but at the same time I'm obviously not comfortable with just having the encryption/decryption approaches sitting there in plain text in the Python source code. A \"very strong discouragement of data tampering\" would be good enough, I think.</p>\n\n<p><strong>What would be the best approach to attain a happy medium of encryption or other proof of data integrity using Python?</strong>  I saw <a href=\"http://stackoverflow.com/questions/609127/generating-a-tamper-proof-signature-of-some-data\">another post</a> talking about generating a \"tamper proof signature\", but if a signature was generated in pure Python then it would be trivial to generate a signature for any arbitrary data.  We <em>might</em> be able to phone home to prove data integrity, but that seems like a major inconvenience for everyone involved.</p>\n"
    },
    {
        "body": "<p>For a particular project, we acquire data for a number of events and collect variables about those events at the same time.  After the data has been collected, we perform a user-customizable analysis on said data to determine whatever it is that the user is interested in.</p>\n\n<p>The data is collected in a form similar to this:</p>\n\n<pre>\n<b>Timestamp    Event</b>\n0            x = 0\n0            y = 1\n3            Event A occurred\n3            x = 1\n4            Event A occurred\n4            x = 2\n9            Event B occurred\n9            y = 2\n9            x = 0\n</pre>\n\n<p>To understand the entire state at any time, the most straightforward approach is to walk over the entire set of data.  For example, if I start at time 0, and \"analyze\" until timestamp 5, I know that at that point x = 2, y = 1, and Event A has occurred twice.  That's a really simple example.  The user <em>might</em> be (and often is) interested in the time between events, say from A to B, and they might specify the first occurrence of A, then B, or the last occurrence of A, then B (respectively, 9-3 = 6 or 9-4 = 5).  Like I said, this is easy to analyze when you're walking over the entire set.</p>\n\n<p>Now, we need to adapt the model to analyze an arbitrary window of time.  If we look at 0-N, that's the easy case.  But if I look at 1-5, for instance, I have no notion of y unless I begin at 0 and know that y was initially 1 and did not change in the window 1-5.</p>\n\n<p>Our approach is to essentially create a dictionary of variables, and run callbacks on events.  If one analysis was \"What is x when Event A occurs and time is > 3\" then we would run that callback on the first Event A, and it would immediately return because time is not greater than 3.  It would run again at 4, and and it would report that x was 1 at t=4.</p>\n\n<p>To adapt to the \"time-windowing\", I think I am going to (in the background) tack on additional conditions to the analysis.  If their analysis is just \"What is x when Event A occurs\", and the current window is 1-5, then I will change it to \"What is x when Event A occurs and time >= 1 and time &lt;= 5\".  Then if the next window is 6-10, I can readjust the condition as necessary.</p>\n\n<p>My main question is: <strong>what pattern does this fit?</strong>  We are obviously not the first people to approach a problem like this, but I have not been able to find how others have approached it.  I probably just don't know what exactly to search on Google.  <strong>Is there any other approach besides keeping a dictionary of the entire global state for looking up a single state at a given time?</strong>  Note also that the data could have several, maybe tens of thousands of records, so the fewer iterations over the data set, the better.</p>\n"
    },
    {
        "body": "<p>I'm looking for an <em>editor</em> - not an IDE - that has just syntax highlighting.  Word completion would be nice for the keywords I specify as well, but I could give up that feature.  It only needs to be Windows compatible.</p>\n\n<p>The situation is that I have an extremely narrow domain specific language that only has around 25 keywords; it doesn't even have conditionals.  I would like the keywords to be highlighted so that the user knows when they've written a keyword correctly.  And to help ensure that they don't need to specifically memorize each keyword, that's where word-completion would be nice.</p>\n\n<p>I'm going under the assumption that the user has the computer skills of your typical grandparent -- I've easily made syntax files for this DSL in Vim and PSPad, but I feel that those have way too many features to be \"usable\" for this target audience.  The functionality of Notepad (plus coloring) would be just about adequate.</p>\n\n<p>I'm also open to writing a simple editor from scratch, if there is a library that already does most of the work I've explained here - i.e. I just tell it what to highlight in what color, possibly using regular expressions.</p>\n\n<p><hr/>\nUpdates: I've looked at SciTE a bit -- it is very much like what I'm looking for, except that creating the new syntax file (properties file) is becoming quite a hassle. My syntax is rather simple: a short sample script might have the form of:</p>\n\n<pre><code>CommandA\nCommandB Num1 Num2\n\nCommandC\n</code></pre>\n\n<p>It doesn't quite fit into Python or a Basic language, but I'm not going to write a lexer for it either.  But the simplicity of SciTE and its ability to run external programs with the file are two high points.</p>\n\n<p>Notepad++ is decent too -- I think it's a bit too full-featured for the intended purpose, but that's not too bad in itself.  I had already tried setting up a syntax file for it, but I'm having a couple issues that just shouldn't even pop up.  For example, I've chosen a color for the number style.  If I put the number 3, it shows up fine.  If I put 3.0, the .0 part is in the default color, not the number color.  If I do 0x80, only the first zero is colored, let alone the x80; so of course 0xff isn't colored right either.  Also, <code>#</code> is my line-comment character.  If I have a line such as</p>\n\n<pre><code># foo bar\n</code></pre>\n\n<p>the whole line is blue, which is proper.  But if there isn't a space (<code>#foo bar</code>), then the whole line stays black.  My last gripe is that auto-completion seems to only pick up on words already used in the file, not the keywords that haven't been used yet.</p>\n\n<p>Am I missing something obvious with the syntax configuration here?  I've had poor luck searching Google for what I think should be obvious answers in regards to Notepad++ syntax.</p>\n"
    },
    {
        "body": "<p>This is probably another easy Haskell question.  If I have some \"nested\" data types, such as in this example code:</p>\n\n<pre><code>data Place = Country\n           | State\n           | City String\n           deriving Show\n\ndata State = California\n           | NewYork\n           deriving Show\n\ndata Country = USA\n             | Canada\n             deriving Show\n</code></pre>\n\n<p>I can legally make a list such as [USA, Canada] of type [Country], or [California, NewYork] of type [State], or [City \"a\", City \"b\"] of type [Place].</p>\n\n<p>What do I have to do to make a list such as [USA, NewYork]?  NewYork is a State which is a Place, and USA is a Country which is a Place, but ghci sees USA so it assumes I am making a list of Countrys (and NewYork is a State, so the list fails).</p>\n\n<p>I think I need some way to cast a Country or State to a Place, but I'm at a loss on how to accomplish this.</p>\n\n<p>I'm trying to avoid throwing the data contained within State and Country into the Place type, which I know would make it work, but I've got a decent amount of real data that I'd rather not jumble up like that.</p>\n"
    }
    ]
}
