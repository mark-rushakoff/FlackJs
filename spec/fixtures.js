FlackFixtures = {};

FlackFixtures.answers = {
    "items": [
    {
        "body": "<p>Currently, Github's <a href=\"https://github.com/github/linguist\" rel=\"nofollow\">linguist project</a> is what is used to determine language statistics, as described in <a href=\"https://github.com/blog/881-linguist\" rel=\"nofollow\">this Github blog post</a> (which came out a few months after this question was originally asked).</p>\n"
    },
    {
        "body": "<p>One way to sort of simulate multi-threadedness would be to have a Javascript function do a little bit of work, then call <code>setTimeout</code> with that same function; then the function will do a little work and call <code>setTimeout</code> again, and this cycle will continue forever or until they close the frame or you signal to stop working.  <a href=\"https://developer.mozilla.org/en/DOM/window.setTimeout\" rel=\"nofollow\">MDN has a good example of how to set this up.</a> </p>\n\n<p>Between timeouts, Javascript should not consume any processor time.  You might have to play around a little bit to see how long your timeouts should be -- 1ms is probably way too short, but 1s is definitely way too long.   Another factor will be the processor speed of the computer running the job, so you might need to do some pseudo-benchmarking on the client's side via Javascript before you can determine how long to delay each time.</p>\n"
    },
    {
        "body": "<p>Your issue is that <code>delegateEvents</code> expects a single, non-changing element for your view.  Because your <code>render</code> function creates a new element every time, the bindings made by <code>delegateEvents</code> are never fired when you click on the element generated by <code>render</code>.</p>\n\n<p>Luckily the current version of Backbone offers a <a href=\"http://backbonejs.org/#View-setElement\" rel=\"nofollow\"><code>setElement</code> method</a> that will reassign your element with the argument you provide, and then it will automatically call <code>delegateEvents</code>.</p>\n"
    },
    {
        "body": "<p>The difference is (most likely) because the month in Javascript's <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/UTC\" rel=\"nofollow\"><code>Date.UTC</code></a> is zero-based and the Ruby's <a href=\"http://ruby-doc.org/stdlib-1.9.3/libdoc/date/rdoc/Date.html#method-c-new\" rel=\"nofollow\"><code>Date.now</code></a> is one-based.</p>\n"
    },
    {
        "body": "<p>At least <a href=\"https://mailman.research.att.com/pipermail/graphviz-interest/2007q2/004428.html\" rel=\"nofollow\">as of May 2007</a>, you can't force \"columns\" <em>per se</em>, but you <em>can</em> apply <em>weight</em> to edges which should help force alignment.  But actually, in this case, if you just add an invisible edge from D to E, you've got vertical alignment.</p>\n\n<pre><code>digraph exmp {\n    A -&gt; B -&gt; C -&gt; D\n    C -&gt; E [constraint=false]\n    A -&gt; C [style=\"dotted\", constraint=false]\n    A -&gt; D [style=\"dotted\",  constraint=false]\n    B -&gt; D [constraint=false]\n    D -&gt; A [style=\"dashed\", constraint=false]\n    C -&gt; A [style=\"dashed\", constraint=false]\n    D -&gt; E [style=\"invis\"] // &lt;---- important new line\n\n\n    subgraph cluster_hackToSinkIt { E -&gt; F }\n    { rank=\"sink\" E F }\n}\n</code></pre>\n\n<p><img src=\"http://img195.imageshack.us/img195/6678/13412833.png\" alt=\"alt text\"></p>\n\n<p>I'm not aware of any way to force edges to one side or another.</p>\n"
    },
    {
        "body": "<p>You'll want to set the label's <code>textvariable</code> with a <a href=\"http://epydoc.sourceforge.net/stdlib/Tkinter.StringVar-class.html\" rel=\"nofollow\"><code>StringVar</code></a>; when the <code>StringVar</code> changes (by you calling <code>myStringVar.set(\"text here\")</code>), then the label's text also gets updated.  And yes, I agree, this is a strange way to do things.</p>\n\n<p>See <a href=\"http://effbot.org/tkinterbook/label.htm\" rel=\"nofollow\">the Tkinter Book</a> for a little more information on this:</p>\n\n<blockquote>\n  <p>You can associate a Tkinter variable with a label. When the contents of the variable changes, the label is automatically updated:</p>\n\n<pre><code>v = StringVar()\nLabel(master, textvariable=v).pack()\n\nv.set(\"New Text!\")\n</code></pre>\n</blockquote>\n"
    },
    {
        "body": "<p>There were many breaking changes in Python 3, among them the switch to <a href=\"http://docs.python.org/release/3.1.3/whatsnew/3.0.html#text-vs-data-instead-of-unicode-vs-8-bit\" rel=\"nofollow\">Unicode for all text</a>.</p>\n\n<p>So <em>Python</em> wasn't designed ground-up for Unicode, but Python <strong>3</strong> was.</p>\n"
    },
    {
        "body": "<p>As of Vim 7.3 you can compile in scripting support for <a href=\"http://vimdoc.sourceforge.net/htmldoc/if_lua.html#Lua\" rel=\"nofollow\">Lua</a> or <a href=\"http://vimdoc.sourceforge.net/htmldoc/if_pyth.html#Python\" rel=\"nofollow\">Python</a>, which ought to more or less completely avoid learning VimScript.  Granted neither of those are Ruby, but unless you have a compelling reason to use Ruby over the other options, this might solve your problem.</p>\n"
    },
    {
        "body": "<p>Like @Peter says, out-of-scope opened URLs will become eligible for garbage collection.</p>\n\n<p>However, also note that <code>urllib.py</code> defines:</p>\n\n<pre><code> def __del__(self):\n        self.close()\n</code></pre>\n\n<p>This means that <strong>when the reference count for that instance reaches zero</strong>, its <a href=\"http://docs.python.org/reference/datamodel.html#object.__del__\" rel=\"nofollow\"><code>__del__</code></a> method will be called, and thus its <code>close</code> method will be called as well.  The most \"normal\" way for the reference count to reach zero is to simply let the instance go out of scope, but there's nothing strictly stopping you from an explicit <code>del x</code> early (however it doesn’t directly call <code>__del__</code> but just decrements the reference count by one).</p>\n\n<p>It's certainly good style to explicitly close your resources -- especially when your application runs the risk of using too much of said resources -- but Python <em>will</em> automatically clean up for you if you don't do anything funny like maintaining (circular?) references to instances that you don't need any more.</p>\n"
    },
    {
        "body": "<p>It sounds like you're looking for <a href=\"http://corelib.rubyonrails.org/classes/Dir.html#M000846\" rel=\"nofollow\"><code>Dir.entries</code></a>:</p>\n\n<blockquote>\n  <p>Returns an array containing all of the filenames in the given directory. Will raise a SystemCallError if the named directory doesn’t exist. </p>\n</blockquote>\n\n<p>If searching Google for how to solve this problem isn't turning up any results, you can look through the Ruby documentation.</p>\n"
    },
    {
        "body": "<p>You can use <a href=\"http://www.kernel.org/pub/software/scm/git/docs/git-clone.html\" rel=\"nofollow\"><code>git clone --depth=$NUM_REVISIONS</code></a>, which has the following caveats:</p>\n\n<blockquote>\n  <p>Create a shallow clone with a history truncated to the specified number of revisions. A shallow repository has a number of limitations (you cannot clone or fetch from it, nor push from nor into it), but is adequate if you are only interested in the recent history of a large project with a long history, and would want to send in fixes as patches.</p>\n</blockquote>\n"
    },
    {
        "body": "<p>Take the characters from a string and make a Set out of them:</p>\n\n<pre><code>irb(main):001:0&gt; require 'set'\nirb(main):002:0&gt; Set.new(\"123444454321\".split(''))\n=&gt; #&lt;Set: {\"1\", \"2\", \"3\", \"4\", \"5\"}&gt;\n</code></pre>\n\n<p>The <code>.split('')</code> call just breaks the string into an array, character-wise.  I originally used <code>String#each_char</code>, but that was new in 1.8.7, and you didn't mention what version of Ruby you're using.</p>\n"
    },
    {
        "body": "<p>Unless there's a specific reason that you need source code -- and I suspect there isn't, you just want to serialize and deserialize data from disk -- a better option would be Python's <a href=\"http://docs.python.org/library/pickle.html\" rel=\"nofollow\"><code>pickle</code> module</a>.</p>\n"
    },
    {
        "body": "<p>You had it nearly right; you just need to tell Python exactly when to make something a string.</p>\n\n<pre><code>&gt;&gt;&gt; cnt = 0\n&gt;&gt;&gt; while cnt &lt; 10:\n...     cnt += 1\n...     print str(cnt) + \" + 1 = \" + str(cnt + 1)\n... \n1 + 1 = 2\n2 + 1 = 3\n3 + 1 = 4\n4 + 1 = 5\n5 + 1 = 6\n6 + 1 = 7\n7 + 1 = 8\n8 + 1 = 9\n9 + 1 = 10\n10 + 1 = 11\n</code></pre>\n\n<p>Strictly speaking, you aren't treating <code>cnt</code> as both an integer and a string here -- it's always an integer.</p>\n"
    },
    {
        "body": "<p>It looks like the <code>Base64</code> library pads by default; padding in Base64 would be the <code>=</code> characters on the end of the data here:</p>\n\n<pre><code>irb(main):002:0&gt; require 'Base64'\n=&gt; true\nirb(main):003:0&gt; Base64.encode64('a')\n=&gt; \"YQ==\\n\"\n</code></pre>\n\n<p>Without the padding, you couldn't be sure whether <code>YQ</code> was everything or whether it was missing something.</p>\n"
    },
    {
        "body": "<p>An annotated tag is probably the first thing you should do.</p>\n\n<p>From there, you have several choices for your workflow: here are two of the most common options.</p>\n\n<p>You can move on in a \"forward-only\" style of development, where the 1.0 series is never supported anymore (1); you can do \"support-only\" on 1.0 series and all new features get added to the 2.0 series (or substitute 1.0.1 and 1.1, leaving 2.0 for a full rewrite -- the version numbers aren't that important) (2).</p>\n\n<p>Scenario 2 is definitely the more \"professional\" option, but if it's a smaller project with a narrow scope, Scenario 1 is okay.</p>\n\n<p>In Scenario 1, you can either do all your work in the master branch, or do feature branches, merging into master when ready.  When you have a new release, just tag it as 1.1 or 1.0.1 or whatever.</p>\n\n<p>In Scenario 2, you can use your master branch to reflect the newest release, a \"support\" branch to reflect your support release, a \"staging\" branch to stage and test new features that will eventually get merged into master, and you can use feature branches for development of new features or bug fixes.  And as you deploy bug fixes, you'll merge the support branch back into master.  When you release either a new version or a support version, just use an annotated tag again.</p>\n\n<p>Personally, I'm usually in favor of the master-staging-support branch with tags, rather than having a branch for each versioned release; but that's the great thing about git -- you can do it however you see fit!  So of course, the two options I've presented are by no means the only options you have for your development workflow.</p>\n"
    },
    {
        "body": "<p>You're looking for <a href=\"http://www.ruby-doc.org/core/classes/Module.html#M000485\" rel=\"nofollow\"><code>Module#const_get</code></a>:</p>\n\n<pre><code>irb(main):014:0&gt; MyModule.constants.each do |c|\nirb(main):015:1*   puts(c.to_s + \"  \" + MyModule.const_get(c).to_s)\nirb(main):016:1&gt; end\nMY_CONST  5\n=&gt; [:MY_CONST]\n</code></pre>\n"
    },
    {
        "body": "<p>That means that your block</p>\n\n<pre><code>if options.benchmark == 'perlbench':\n     process = Mybench.perlbench\nelif options.benchmark == 'bzip2':\n     process = Mybench.bzip2\nelif options.benchmark == 'gcc':\n     process = Mybench.gcc\n</code></pre>\n\n<p>didn't match any of <code>options.benchmark</code> so the variable <code>process</code> was never assigned anything.  You need to throw an</p>\n\n<pre><code>else:\n    process = Mybench.&lt;somedefault&gt;\n</code></pre>\n\n<p>on the end of it (of course filling in <code>&lt;somedefault&gt;</code> as appropriate).  Or if that's an invalid case, you could raise an exception, perhaps.</p>\n"
    },
    {
        "body": "<p>A just slightly different way to do it would be to use <a href=\"http://docs.python.org/library/functions.html#all\" rel=\"nofollow\">the built-in <code>all</code> method</a>; however, this will also catch false-ish values like <code>0</code> or <code>\"\"</code>, which may not be what you want:</p>\n\n<pre><code>&gt;&gt;&gt; all([1, 2, 3])\nTrue\n&gt;&gt;&gt; all([None, 1, 2])\nFalse\n&gt;&gt;&gt; all([0, 1])\nFalse\n</code></pre>\n"
    },
    {
        "body": "<p>Lua for Windows includes a handful of other, useful libraries and tools.  The actual Lua executable included is still tiny, in the 1-2MB range as expected.</p>\n\n<p>Having the extras there already will only make things easier, and disk space is cheap: go with Lua for Windows.</p>\n"
    },
    {
        "body": "<p><code>var version = ...</code> <em>shadows</em> the property with a local variable; meaning, the assignment is stored in a local variable named <code>version</code>, not the property named <code>version</code>.</p>\n\n<p><code>this.version = ...</code> will do what you want.</p>\n\n<p>By the way, out of convention in C#, local variables begin with lowercase letters as you have, but properties begin with an uppercase letter -- conventions like these may help alleviate shadowing issues as you experienced here.</p>\n"
    },
    {
        "body": "<p><a href=\"http://en.wikipedia.org/wiki/Restrict\" rel=\"nofollow\">Wikipedia entry for <code>restrict</code></a></p>\n\n<p>In short, <code>restrict</code> tells the compiler that the segments of memory pointed to by s1 and s2 do not overlap; this allows the code to perform less error checking.</p>\n"
    },
    {
        "body": "<p>The directions for this are in <a href=\"http://www.redmine.org/projects/redmine/wiki/RedmineTextFormatting\" rel=\"nofollow\">Redmine's text formatting page</a>.  </p>\n\n<blockquote>\n  <p>Redmine allows hyperlinking between issues, changesets and wiki pages from anywhere wiki formatting is used.</p>\n  \n  <ul>\n  <li>...</li>\n  <li>Link to a changeset with a non-numeric hash: <strong>commit:c6f4d0fd</strong> (displays c6f4d0fd). Added in r1236.</li>\n  </ul>\n</blockquote>\n"
    },
    {
        "body": "<p>SQLite has <a href=\"http://www.sqlite.org/lang_corefunc.html\" rel=\"nofollow\">a <code>LOWER</code> function</a> for this:</p>\n\n<pre><code>sqlite&gt; SELECT LOWER(\"Hello, WORLD!\");\nhello, world!\n</code></pre>\n\n<blockquote>\n  <p>The lower(X) function returns a copy of string X with all ASCII characters converted to lower case. The default built-in lower() function works for ASCII characters only. To do case conversions on non-ASCII characters, load the ICU extension. </p>\n</blockquote>\n"
    },
    {
        "body": "<p>From <em>within a Ruby script</em>, you can redirect <code>stdout</code> and <code>stderr</code> with the <a href=\"http://ruby-doc.org/core/classes/IO.html#M000890\"><code>IO#reopen</code></a> method.</p>\n\n<pre><code># a.rb\n$stdout.reopen(\"out.txt\", \"w\")\n$stderr.reopen(\"err.txt\", \"w\")\n\nputs 'normal output'\nwarn 'something to stderr'\n</code></pre>\n\n<pre>\n$ ls\na.rb\n$ ruby a.rb\n$ ls\na.rb    err.txt out.txt\n$ cat err.txt \nsomething to stderr\n$ cat out.txt \nnormal output\n</pre>\n"
    },
    {
        "body": "<p>You should be able to use a caret (^) <a href=\"http://windowsitpro.com/article/articleid/39047/how-can-i-pass-a-percent-sign--value-to-regexe.html\" rel=\"nofollow\">to escape a percent sign</a>.</p>\n\n<p>The reason <code>%2</code> is disappearing is that the batch file is substituting the second argument passed in, and your seem to not have a second argument.  One way to work around that would be to actually try <code>foo.bat ^%1 ^%2...</code> so that when a <code>%2</code> is encountered in a command, it is actually substituted with a literal <code>%2</code>.</p>\n"
    },
    {
        "body": "<p><code>y is x</code> will be True, <code>y is z</code> will be <code>False</code>.</p>\n"
    },
    {
        "body": "<p><a href=\"http://wyday.com/wyupdate/\" rel=\"nofollow\">WyUpdate</a> is the way to go here.  We've been using it for over a year with great results (they have excellent support too).</p>\n\n<p>It actually uses patches to update files so that when a 5MB executable only has a small change, the client only has to download a file in the order of kilobytes.</p>\n\n<p>They supply an automatic update component for either Windows Forms or WPF that looks nice and works great.</p>\n\n<p>You can host the update files on either an FTP server or a normal website without any server-side configuration.</p>\n\n<p>There's plenty more to it, and the best place to start is with <a href=\"http://wyday.com/wybuild/help/quickintro.php\" rel=\"nofollow\">their video tutorial</a> of how to set up an update.</p>\n"
    },
    {
        "body": "<p>Today it's one line, next week it's twenty lines.</p>\n\n<p>Putting tests in place now warns you if you mistakenly break the behavior down the road.</p>\n\n<p>Use your best judgment as to whether it's something that has any chance of changing in the future.</p>\n"
    },
    {
        "body": "<p>The <a href=\"http://msdn.microsoft.com/en-us/library/bb337697.aspx\" rel=\"nofollow\"><code>.Any()</code> extension method</a> was designed for this case.</p>\n"
    }
    ]
}
